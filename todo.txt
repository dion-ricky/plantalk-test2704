
    function invokeServiceWorkerUpdateFlow(registration) {
        // TODO implement your own UI notification element
        notification.show("New version of the app is available. Refresh now?");
        notification.addEventListener('click', () => {
            if (registration.waiting) {
                // let waiting Service Worker know it should became active
                registration.waiting.postMessage('SKIP_WAITING')
            }
        })
    }

    // check if the browser supports serviceWorker at all
    if ('serviceWorker' in navigator) {
        // wait for the page to load
        window.addEventListener('load', async () => {
            // register the service worker from the file specified
            const registration = await navigator.serviceWorker.register('/service-worker.js')

            // ensure the case when the updatefound event was missed is also handled
            // by re-invoking the prompt when there's a waiting Service Worker
            if (registration.waiting) {
                invokeServiceWorkerUpdateFlow(registration)
            }

            // detect Service Worker update available and wait for it to become installed
            registration.addEventListener('updatefound', () => {
                if (registration.installing) {
                    // wait until the new Service worker is actually installed (ready to take over)
                    registration.installing.addEventListener('statechange', () => {
                        if (registration.waiting) {
                            // if there's an existing controller (previous Service Worker), show the prompt
                            if (navigator.serviceWorker.controller) {
                                invokeServiceWorkerUpdateFlow(registration)
                            } else {
                                // otherwise it's the first install, nothing to do
                                console.log('Service Worker initialized for the first time')
                            }
                        }
                    })
                }
            })

            let refreshing = false;

            // detect controller change and refresh the page
            navigator.serviceWorker.addEventListener('controllerchange', () => {
                if (!refreshing) {
                    window.location.reload()
                    refreshing = true
                }
            })
        })
    }


{
    "users": {
        "a1kAI2": {
            "name": "Bob",
            "room": {
                "community": [],
                "consultation": []
            }
        }
    },

    "communities": {
        "kq91Amc": {
            "name": "Pecinta Sukulen",
            "chatroom": {
                "chatroomid": "oqkxi10",
                "lastmessage": "Abcdef ...",
                "timestamp": 19149123911,
                "lastbatch": "b1"
            }
        }
    },

    "consultations": {
        "mqiX91": {
            "name": "Mrs. Delaware",
            "profession": "Agriculture Lecturer",
            "chatroom": {
                "userid": "a1kAI2",
                "chatroomid": "oqkxi10",
                "lastmessage": "Abcdef ...", //short
                "timestamp": 14210421221,
                "lastbatch": "b1"
            }
        }
    }

    "chatrooms": {
        "oqkxi10.b1": {
            "prevbatch": "",
            "messages": [{ //batch of 10 or less messages
                    "userid": "a1kAI2",
                    "message": "Hello there",
                    "timestamp": 1929193113
                },
                {

                },
                {

                }]
            }
        },
        "oqkxi10.b2": {
            "prevbatch": "b1",
            "messages": [{
                "userid": "",
                "message": "",
                "timestamp": 193919212
            }]
        }
    }
}